package corelib;

import java.io.FileNotFoundException;
import squidpony.squidmath.RNG;

/**
 * A random name generator that creates names by combining a prefix and a suffix
 * from two specified files.
 */
public class NameGenerator
{
    // FIELDS
    
    /** The array of all syllables to choose from. */
    private String[][] syllables;
    
    /** The random number generator used to select prefixes and suffixes. */
    private RNG rng;
    
    // CONSTRUCTORS
    
    /**
     * Creates a NameGenerator with the given syllable sets and the given random
     * generator.
     * @param syllables the syllables to choose from
     * @param rng the random generator to use
     */
    public NameGenerator(String[][] syllables, RNG rng)
    {
        this.syllables = syllables;
        this.rng = rng;
    }
    
    /**
     * Creates a NameGenerator with the given syllable sets and a new random
     * generator with the given seed.
     * @param syllables the syllables to choose from
     * @param seed the seed of the random generator to use
     */
    public NameGenerator(String[][] syllables, long seed)
        {this(syllables, new RNG(seed));}
    
    /**
     * Creates a NameGenerator with the given syllable sets and a new random
     * generator.
     * @param syllables the syllables to choose from
     */
    public NameGenerator(String[][] syllables)
        {this(syllables, new RNG());}
    
    /**
     * Creates a NameGenerator with the given file names and the given random
     * generator.
     * @param files the paths of the files to load
     * @param rng the random generator to use
     * @throws java.io.FileNotFoundException
     */
    public NameGenerator(RNG rng, String... files) throws FileNotFoundException
    {
        syllables = new String[files.length][];
        for (int syllable = 0; syllable < files.length; syllable++)
            syllables[syllable] = FileManager.toLineArray(files[syllable]);
        this.rng = rng;
    }
    
    /**
     * Creates a NameGenerator with the given file names and a new random
     * generator with the given seed.
     * @param files the paths of the files to load
     * @param seed the seed of the random generator to be used
     * @throws java.io.FileNotFoundException
     */
    public NameGenerator(long seed, String... files)
            throws FileNotFoundException
        {this(new RNG(seed), files);}
    
    /**
     * Creates a NameGenerator with the given file names and a new random
     * generator.
     * @param files the paths of the files to load
     * @throws java.io.FileNotFoundException
     */
    public NameGenerator(String... files) throws FileNotFoundException
        {this(new RNG(), files);}
    
    // GENERATION
    
    /**
     * Retrieves a random syllable from the given place in the array.
     * @param place the index of the syllable array to choose from
     * @return a randomly-selected String from the place in the syllable array
     */
    public String getSyllable(int place)
    {
        return place < 0 || place >= syllables.length || syllables == null
                || syllables[place] == null ?
                null : syllables[place][rng.nextInt(syllables[place].length)];
    }
    
    /**
     * Generates a random name with the given number of syllables.
     * @param length the number of syllables that will be in the generated name
     * @return a name generated by combining the given number of syllables
     */
    public String generateName(int length)
    {
        if (length <= 0 || length > syllables.length)
            throw new IndexOutOfBoundsException("Length must be between 0 and "
                    + syllables.length);
        
        StringBuilder name = new StringBuilder();
        for (int place = 0; place < length; place++)
            name.append(getSyllable(place));
        return name.toString();
    }
    
    /**
     * Generates a random name with a random number of syllables above the lower
     * bound.
     * @param min the fewest number of syllables that will be chosen
     * @return a name generated by combining a random number of syllables above
     * the lower bound
     */
    public String generateRandomLengthName(int min)
    {
        return generateName(Math.min(rng.nextInt(syllables.length)
                + Math.max(min, 1), syllables.length));
    }
    
    /**
     * Generates a random name with a random number of syllables.
     * @return a name generated by combining a random number of syllables
     */
    public String generateRandomLengthName()
        {return generateName(rng.nextInt(syllables.length) + 1);}
    
    /**
     * Generates a random name by combining the maximum number of ordered
     * syllables.
     * @return a name generated by combining a syllable from each possible place
     */
    public String generateFullName()
        {return generateName(syllables.length);}
}